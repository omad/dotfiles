# readline config (used by bash and others)

# Ignore case when doing completion. Works on HFS+, UFS, whatever.
set completion-ignore-case on

# Show all matches when there's ambiguity.
set show-all-if-ambiguous on

# Immediately add a trailing slash when autocompleting symlinks to directories
set mark-symlinked-directories on

# Use the text that has already been typed as the prefix for searching through
# commands (i.e. more intelligent Up/Down behavior)
"\e[B": history-search-forward
"\e[A": history-search-backward

# Append file-type indicator to end of filenames in completions (cf. ls -F).
set visible-stats on

# Edit mode for readline apps like psql (emacs or vi)
set editing-mode emacs

# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla".
#
# Only supported by bash 4+
set skip-completed-text on

# For bash 4.1+ cycle through completions
"\es": menu-complete-backward
"\et": menu-complete

# Don't ring bell on completion
set bell-style none

# or, don't beep at me - show me
#set bell-style visible

# Show all instead of beeping first
set show-all-if-ambiguous off

# Expand homedir name
#set expand-tilde on

# Append "/" to all dirnames
#set mark-directories on
#set mark-symlinked-directories on

# visible-stats
# Append a mark according to the file type in a listing
set visible-stats off
set mark-directories on

# Match all files
#set match-hidden-files on

# 'Magic Space'
# Insert a space character then performs
# a history expansion in the line
#Space: magic-space

# MSYSTEM is emacs based
$if mode=emacs
  # Common to Console & RXVT
  "\C-?": backward-kill-line         # Ctrl-BackSpace
  "\e[2~": paste-from-clipboard      # "Ins. Key"
  "\e[5~": beginning-of-history      # Page up
  "\e[6~": end-of-history            # Page down

  $if term=msys # RXVT
    "\e[7~": beginning-of-line      # Home Key
    "\e[8~": end-of-line            # End Key
    "\e[11~": display-shell-version # F1
    "\e[15~": re-read-init-file     # F5
    "\e[12~": "Function Key 2"
    "\e[13~": "Function Key 3"
    "\e[14~": "Function Key 4"
    "\e[17~": "Function Key 6"
    "\e[18~": "Function Key 7"
    "\e[19~": "Function Key 8"
    "\e[20~": "Function Key 9"
    "\e[21~": "Function Key 10"
  $else
  # Eh, normal Console is not really cygwin anymore, is it? Using 'else' instead. -mstormo
  # $if term=cygwin # Console
    "\e[1~": beginning-of-line      # Home Key
    "\e[4~": end-of-line            # End Key
    "\e[3~": delete-char      # Delete Key
    "\e\e[C": forward-word      # Alt-Right
    "\e\e[D": backward-word      # Alt-Left
    "\e[17~": "Function Key 6"
    "\e[18~": "Function Key 7"
    "\e[19~": "Function Key 8"
    "\e[20~": "Function Key 9"
    "\e[21~": "Function Key 10"
    "\e[23~": "Function Key 11"
  $endif
$endif
